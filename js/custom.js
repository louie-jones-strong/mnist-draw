var model;
// async function loadModel (){
//     model = await tf.loadModel('https://zackakil.github.io/mnist-draw/model.json').then(() => {
//         document.getElementById('model-load').style.display = 'none';
//     });
// }
// loadModel()

tf.loadModel('https://zackakil.github.io/mnist-draw/model.json').then((m) => {
        model = m;
        document.getElementById('model-load').style.display = 'none';
});

function processImage(canvas) {
  ctx = canvas.getContext('2d');
  // scale image to 28x28
  const ctxScaled = document.getElementById('scaled-canvas').getContext('2d')
  ctxScaled.save();
  ctxScaled.clearRect(0, 0, ctxScaled.canvas.height, ctxScaled.canvas.width);
  ctxScaled.scale(28.0 / ctx.canvas.width, 28.0 / ctx.canvas.height)
  ctxScaled.drawImage(document.getElementById('canvas'), 0, 0)
  
  const {data} = ctxScaled.getImageData(0, 0, 28, 28)

  ctxScaled.restore();
  //console.log(pixels);
  return document.getElementById('scaled-canvas')
}

// Canvas setup
var canvas = new fabric.Canvas('canvas');
canvas.isDrawingMode = true;
canvas.freeDrawingBrush.width = 12;
canvas.freeDrawingBrush.color = "#000000";
canvas.backgroundColor = "#ffffff";
canvas.renderAll();

canvas.on('mouse:up', predict);


// canvas.addEventListener("mouse:up", );

// Clear button callback
$("#clear-canvas").click(function(){ 
  canvas.clear(); 
  canvas.backgroundColor = "#ffffff";
  canvas.renderAll();
  updateChart(zeros);
  $("#status").removeClass();
});
var tensor_pixels;
// Predict button callback
// $("#predict").click(function(){  
  function predict(){

  // Change status indicator
  $("#status").removeClass().toggleClass("fa fa-spinner fa-spin");

  pixels = processImage(canvas);
  tensor_pixels = tf.scalar(1).sub(tf.fromPixels(pixels, 1).toFloat().div(255))
  var prediction = model.predict( tensor_pixels.expandDims() ).dataSync()
  $("#status").removeClass().toggleClass("fa fa-check");
  $('#svg-chart').show();
  updateChart(prediction);

};

// Iniitialize d3 bar chart
$('#svg-chart').hide();
var labels = ['0','1','2','3','4','5','6','7','8','9'];
var zeros = [0,0,0,0,0,0,0,0,0,0,0];

var margin = {top: 0, right: 0, bottom: 20, left: 0},
    width = 360 - margin.left - margin.right,
    height = 180 - margin.top - margin.bottom;

var svg = d3.select("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", 
          "translate(" + margin.left + "," + margin.top + ")");

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1)
    .domain(labels);
    
var y = d3.scale.linear()
          .range([height, 0])
          .domain([0,1]);  

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .tickSize(0);

svg.selectAll(".bar")
    .data(zeros)
  .enter().append("rect")
    .attr("class", "bar")
    .attr("x", function(d, i) { return x(i); })
    .attr("width", x.rangeBand())
    .attr("y", function(d) { return y(d); })
    .attr("height", function(d) { return height - y(d); });

svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

// Update chart data
function updateChart(d) {
  d3.selectAll("rect")
    .data(d)
    .transition()
    .duration(300)
    .attr("y", function(d) { return y(d); })
    .attr("height", function(d) { return height - y(d); });
}

var testDigit


// window.setInterval(predict, 1000);
